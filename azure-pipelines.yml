# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- staging

resources:
- repo: self

pool:
  vmImage: ubuntu-latest

variables:
  containerRegistry: docker-registry
  azureSubscription: azure-service-connection

stages:
- stage: Test
  displayName: Test
  jobs:
    - job: Test
      displayName: Test
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '>=20.0.0'
          displayName: 'Install Node.js'
        - script: |
            npm i jest jest-junit jest-junit-reporter --save-dev
            npm i @prisma/client
            npx prisma generate
            npm run test:ci
          displayName: 'Npm install & test'
        
        - task: PublishTestResults@2
          displayName: 'Publish Test Results'
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: 'coverage/report.xml'
            mergeTestResults: true
            failTaskOnFailedTests: true

        - task: PublishCodeCoverageResults@1
          displayName: 'Publish Code Coverage'
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: 'coverage/cobertura-coverage.xml'
            reportDirectory: 'coverage'
            failIfCoverageEmpty: true

        - task: BuildQualityChecks@9
          inputs:
            checkCoverage: true
            coverageFailOption: 'fixed'
            coverageType: 'lines'
            coverageThreshold: '85'

- stage: Build
  displayName: Build 
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: Build
    displayName: Build 
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: $(containerRegistry)
        repository: minhledang/asset-management-be-staging
        command: buildAndPush
        Dockerfile: Dockerfile
        tags: latest
        
        
- stage: Deploy
  displayName: Deploy
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: Deploy
    steps:
      - task: AzureWebAppContainer@1
        inputs:
          azureSubscription: $(azureSubscription)
          appName: asset-management-be-staging
          containers: minhledang/asset-management-be-staging:latest